/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "CustomLookAndFeel.h"

//==============================================================================
ChuckRacksAudioProcessorEditor::ChuckRacksAudioProcessorEditor (ChuckRacksAudioProcessor* ownerFilter)
: AudioProcessorEditor (ownerFilter), mainView(getProcessor())
{
    LookAndFeel::setDefaultLookAndFeel(new CustomLookAndFeel());
    
    // This is where our plugin's editor size is set.
    setSize (470, 125);
    
    addAllShredsButton = new DrawableButton("Add All Shreds", DrawableButton::ButtonStyle::ImageFitted);
    ScopedPointer<XmlElement> addAllShredSVGUp(XmlDocument::parse(BinaryData::addshrediconUp_svg));
    ScopedPointer<XmlElement> addAllShredSVGDown(XmlDocument::parse(BinaryData::addshrediconDown_svg));
    
    addAllShredsButton->setImages(Drawable::createFromSVG(*addAllShredSVGUp), Drawable::createFromSVG(*addAllShredSVGUp), Drawable::createFromSVG(*addAllShredSVGDown));
    addAndMakeVisible(addAllShredsButton);
    addAllShredsButton->setBounds(330, 4, 64,64);
    addAllShredsButton->addListener(this);
    
    removeAllShredsButton = new DrawableButton("Remove All Shreds", DrawableButton::ButtonStyle::ImageFitted);
    ScopedPointer<XmlElement> removeAllShredSVGUp(XmlDocument::parse(BinaryData::removeAllShredUp_svg));
    ScopedPointer<XmlElement> removeAllShredSVGDown(XmlDocument::parse(BinaryData::removeAllShredDown_svg));
    removeAllShredsButton->setImages(Drawable::createFromSVG(*removeAllShredSVGUp), Drawable::createFromSVG(*removeAllShredSVGUp), Drawable::createFromSVG(*removeAllShredSVGDown));
    addAndMakeVisible(removeAllShredsButton);
    removeAllShredsButton->setBounds(400, 4, 64,64);
    removeAllShredsButton->addListener(this);
    
        // add some sliders..
    addAndMakeVisible(scaleBox);
    scaleBox.addItem("Ionian",1);
    scaleBox.addItem("Dorian",2);
    scaleBox.addItem("Phrygian",3);
    scaleBox.addItem("Lydian",4);
    scaleBox.addItem("Mixolydian",5);
    scaleBox.addItem("Aelian",6);
    scaleBox.addItem("Locrian",7);
    scaleBox.addItem("Major7",8);
    scaleBox.addItem("Minor7",9);
    scaleBox.addItem("Dom7",10);
    scaleBox.addItem("minMaj7",11);
    scaleBox.addListener(this);
    scaleBox.setSelectedItemIndex(0);
    scaleBox.setBounds(2, 4, 160,64);

    addAndMakeVisible(syncBox);
    syncBox.addItem("1",1);
    syncBox.addItem("1/4",2);
    syncBox.addItem("1/8",3);
    syncBox.addItem("1/16",4);
    syncBox.addItem("1/32",5);
    syncBox.addItem("1/64",6);
    syncBox.addListener(this);
    syncBox.setSelectedItemIndex(0);
    syncBox.setBounds(170,4, 150 ,64);
    addAndMakeVisible(*authorLabel1);
    authorLabel1->setBounds(4,90,466,10);
    authorLabel1->setJustificationType(36);
    const Font *labelFont=new Font("helvetica",9,0);
    authorLabel1->setFont(*labelFont);

    addAndMakeVisible(*authorLabel2);
    authorLabel2->setJustificationType(36);
    authorLabel2->setBounds(4,98,466,18);
    authorLabel2->setFont(*labelFont);

    /*
    addAndMakeVisible(isLiveButton);
    isLiveButton.setButtonText("Live");
    isLiveButton.setToggleState("True",dontSendNotification);
    isLiveButton.setBounds(400,4,64,64);
    */


    
    
    /*
    addNewFileContainerButton = new DrawableButton("Add Code Editor", DrawableButton::ButtonStyle::ImageFitted);
    ScopedPointer<XmlElement> addFileContainerSVGUp(XmlDocument::parse(BinaryData::addcodeeditorUp_svg));
    ScopedPointer<XmlElement> addFileContainerSVGDown(XmlDocument::parse(BinaryData::addcodeeditorDown_svg));
    addNewFileContainerButton->setImages(Drawable::createFromSVG(*addFileContainerSVGUp), Drawable::createFromSVG(*addFileContainerSVGUp), Drawable::createFromSVG(*addFileContainerSVGDown));
    addAndMakeVisible(addNewFileContainerButton);
    addNewFileContainerButton->setBounds(78, 4, 32, 32);
    addNewFileContainerButton->addListener(this);
    
    
    openParameterListButton = new DrawableButton("Open Parameter List", DrawableButton::ButtonStyle::ImageFitted);
    ScopedPointer<XmlElement> openParameterListSVGRight(XmlDocument::parse(BinaryData::collapse_svg));
    ScopedPointer<XmlElement> openParameterListSVGLeft(XmlDocument::parse(BinaryData::open_svg));
    openParameterListButton->setClickingTogglesState(true);
    openParameterListButton->setToggleState(false, dontSendNotification);
    openParameterListButton->setImages(Drawable::createFromSVG(*openParameterListSVGRight),
                                        nullptr,
                                        Drawable::createFromSVG(*openParameterListSVGLeft),
                                        nullptr,
                                        Drawable::createFromSVG(*openParameterListSVGLeft),
                                        nullptr,
                                        Drawable::createFromSVG(*openParameterListSVGRight),
                                        nullptr);
    
    openParameterListButton->setColour(DrawableButton::backgroundOnColourId, Colour(0.0f,0.0f,0.0f,1.0f));
    openParameterListButton->setColour(DrawableButton::backgroundColourId, Colour(0.0f,0.0f,0.0f,1.0f));
    addAndMakeVisible(openParameterListButton);
    openParameterListButton->setBounds(getWidth()-32, 4, 32, 32);
    openParameterListButton->addListener(this);
    */
    
    startTimer(50);
    timerCallback();
    
    //addAndMakeVisible(&mainView);
    auto fc = getProcessor()->getChuckCodeModelManager()->addFileContainer();
    mainView.addNewChuckCodeComponent(fc);
}

ChuckRacksAudioProcessorEditor::~ChuckRacksAudioProcessorEditor()
{
}

//==============================================================================
void ChuckRacksAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colour(38, 40, 49));
    
    g.setColour(Colour(40, 43, 34));
   // g.drawRect(getLocalBounds(), 1);
}

void ChuckRacksAudioProcessorEditor::resized()
{
    mainView.setBounds( 0, 40, getWidth(), getHeight() - 40 );
}

void ChuckRacksAudioProcessorEditor::buttonClicked(Button *buttonThatWasPressed)
{
    if (buttonThatWasPressed==addAllShredsButton)
    {
        DBG("Add all shreds button pressed");
        //getProcessor()->getChuckCodeModelManager()->addAllShreds();
        for(auto it : getProcessor()->getChuckCodeModelManager()->chuckCodeModelCollection)
            if(it.second != nullptr)
            {
                it.second->addShredWithCode(synthCode.getCode());
                break;
            }
    }
    
    else if (buttonThatWasPressed==removeAllShredsButton)
    {
        getProcessor()->getChuckCodeModelManager()->removeAllShreds();
        for(auto it : getProcessor()->getChuckCodeModelManager()->chuckCodeModelCollection)
            if(it.second != nullptr)
            {
                //it.second->removeLastShred();
                it.second->addShredWithCode(synthCode.allOff);
                break;
            }

    }
    
    else if (buttonThatWasPressed==addNewFileContainerButton)
    {
        auto fc = getProcessor()->getChuckCodeModelManager()->addFileContainer();
        mainView.addNewChuckCodeComponent(fc);
    }
    
    else if (buttonThatWasPressed == openParameterListButton){
        mainView.toggleParamListVisibility();
    }
    else if (buttonThatWasPressed == &isLiveButton)
    {

        if(isLiveButton.getToggleState())
            synthCode.isLive=synthCode.livemode;
        else
            synthCode.isLive=synthCode.nolivemode;
    }
    
    //if (buttonThatWasPressed==browseCodeButton) {
    //    getProcessor()->fileManager.openBrowser();
    //    lastFileLoaded=getProcessor()->fileManager.fileName;
    //}
}

void ChuckRacksAudioProcessorEditor::timerCallback()
{
    const OwnedArray<AudioProcessorParameter>& params = getAudioProcessor()->getParameters();

    for (int i=0;i<params.size();i+=1)
    {
        if(params[i]->getName(10)=="ADD" && params[i]->getValue()==true)
        {
            for(auto it : getProcessor()->getChuckCodeModelManager()->chuckCodeModelCollection)
            if(it.second != nullptr)
            {
                it.second->addShredWithCode(synthCode.getCode());
                break;
            }
            *( dynamic_cast<AudioParameterBool*> (params[i]))=false;

        }
        if(params[i]->getName(10)=="CLEAR" && params[i]->getValue()==true)
        {
            getProcessor()->getChuckCodeModelManager()->removeAllShreds();
            for(auto it : getProcessor()->getChuckCodeModelManager()->chuckCodeModelCollection)
                if(it.second != nullptr)
                {
                    //it.second->removeLastShred();
                    it.second->addShredWithCode(synthCode.allOff);
                    break;
                }
                *( dynamic_cast<AudioParameterBool*> (params[i]))=false;

        }

    }
    
}
/*
void ChuckRacksAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    
}
 */
