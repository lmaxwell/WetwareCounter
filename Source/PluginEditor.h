/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"
#include "ParameterMapUI.h"
#include "MainViewComponent.h"
#include "SynthCode.h"

//==============================================================================
/**
*/
class ChuckRacksAudioProcessorEditor  : public AudioProcessorEditor,
                                        public ButtonListener,
                                        private ComboBoxListener,
                                        public Timer
{
public:
    ChuckRacksAudioProcessorEditor (ChuckRacksAudioProcessor* ownerFilter);
    ~ChuckRacksAudioProcessorEditor();

    //==============================================================================
    // This is just a standard Juce paint method...
    void paint (Graphics& g) override;
    void resized() override;
    
    ChuckRacksAudioProcessor * getProcessor() const
    {
        return static_cast<ChuckRacksAudioProcessor *>(getAudioProcessor());
        
    }
    
    void buttonClicked(Button* buttonThatWasPressed) override;
    String lastFileLoaded;
    
    void timerCallback() override;
    //void sliderValueChanged (Slider* slider) override;
    SynthCode synthCode;
    ComboBox scaleBox;
    String mode[11]={"i","ii","iii","iv","v","vi","vii","major7","minor7","dom7","mMaj7"};
    ComboBox syncBox;
    String sync[6]={"PluginHost.nextBar()=>now;\n",
                    "PluginHost.nextQuarter()=>now;\n",
                    "PluginHost.nextEighth()=>now;\n",
                    "PluginHost.nextSixteenth()=>now;\n",
                    "PluginHost.nextSixteenth()=>now;PluginHost.sixteenthDur()/2=>now;\n",        
                    "PluginHost.nextSixteenth()=>now;PluginHost.sixteenthDur()/4=>now;\n"};
    ToggleButton isLiveButton;


    void comboBoxChanged (ComboBox* comboBoxThatHasChanged) override
    {
        if (comboBoxThatHasChanged == &scaleBox)
        {
            
            synthCode.mode=mode[scaleBox.getSelectedId()-1];
            ;

        }
        if (comboBoxThatHasChanged == &syncBox)
        {
          
            synthCode.sync=sync[syncBox.getSelectedId()-1];
            ;

        }
    }

    Label *authorLabel1 = new Label ("author1","WETWARE COUNTER for DOUBAN.COM and WETWARE FESTIVAL 2017");
    Label *authorLabel2 = new Label ("author2","made by Li Xian, concept and tested by Li Xian and Han Han");
    
private:
    ScopedPointer<DrawableButton> addAllShredsButton;
    ScopedPointer<DrawableButton> removeAllShredsButton;
    ScopedPointer<DrawableButton> addNewFileContainerButton;
    ScopedPointer<DrawableButton> openParameterListButton;
    
    //ScopedPointer<TextButton> addAllShredsButton;
    ScopedPointer<TextButton> browseCodeButton;
    //ScopedPointer<TextButton> removeShredButton;
    //ScopedPointer<TextButton> addFileContainerButton;
    
    MainViewComponent mainView;
};


#endif  // PLUGINEDITOR_H_INCLUDED
